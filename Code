7*6
0.8*100/2
library("dslabs")
g<-25


# test, if definition works
g
z
ls()
sqrt(100)

#defining x
x<-36
x
#try formulas
exp(log(15))
?log
log(12,base=100)

#class man kann sich die Klasse von a anschauen
a <- 2
class(a)
class(ls)

## 1.3 data types

#relevant data is stored in data.frame murders (nächste 3 Zeilen ausführen)
library(dslabs)
data(murders)
class(murders)

#Struktur von etwas einsehen
str(murders)

#Tabellenstruktur
# nur die ersten 6 Zeilen einer Tabelle:
head(murders)
#Rows are the different observation, in this case, states.And columns represent different variables.
# use nrow and ncol to identify the number of rows and columns in a dataset
nrow(movielens)
ncol(movielens)

#Accessor: $ (access different variables(Spalten) represented)
murders$population

#Namen der einzelnen Spalten anzeigen lassen
names(murders)

#Länge/Menge der Einträge anzeigen lassen
length(murders$population)
pop <- murders$population
length(pop)

# vectors can be of class numeric and character
class(pop)
class(murders$state)

#character Vector (mit quotes kriegt man variabel zurück (wird nicht mit vorheriger Definition beantwortet))
"a"

#as with numeric vectors, all entries in a character vector need to be a character
#logical vectors are either TRUE or FALSE
z <- 3 == 2
z
class(z)

# factors are another type of class
class(murders$region)
# obtaining the levels of a factor (Bsp. North, east, south, west (characters werden denen glaube ich zugeteilt))
levels(murders$region)

#zwei Variabeln identisch?
indentical(a, b)

# Write one line of code to show the number of states per region
table(murders$region)

#pq-Formel
(-b + sqrt(b^2 - 4*a*c))/(2*a)
(-b - sqrt(b^2 - 4*a*c))/(2*a)

#1.Accessment
#pq-Formel Gleichung lösen
a <- 2
b <- -1
c <- -4
(-b + sqrt(b^2 - 4*a*c))/(2*a)
(-b - sqrt(b^2 - 4*a*c))/(2*a)
log(1024,base=4)
#movie dslabs
library(dslabs)
data(movielens)
legth(movielens)


typeof(title)
# ->
typeof(movielens$title)
#(nur bei title möglich, bei genres:)
class(movielens$genres)

nlevels(movielens$genres)

a <- murders$abb
class(a)

class(murders$region)
levels(length(murders$region))


##SECTION 2

#Vectors
#einfachster: c (concatenate)
# We may create vectors of class numeric(1.Zeile) or character(2. Zeile (quotes)) with the concatenate function
codes <- c(380, 124, 818)
country <- c("italy", "canada", "egypt")

# We can also name the elements of a numeric vector
# Note that the two lines of code below have the same result
codes <- c(italy = 380, canada = 124, egypt = 818)
codes <- c("italy" = 380, "canada" = 124, "egypt" = 818)
codes
#obenstehende sind numeric codes
class(codes)

# We can also name the elements of a numeric vector using the names() function
codes <- c(380, 124, 818)
country <- c("italy","canada","egypt")
names(codes) <- country
codes

#sequence (2.Bsp: schrittgröße)
seq(1,10)
seq(1,10,3)

# Using square brackets is useful for subsetting to access specific elements of a vector
codes[2]
codes[c(1,3)]
codes[1:2]

# If the entries of a vector are named, they may be accessed by referring to their name
codes["canada"]
codes[c("egypt","italy")]

#R korrigiert: ein character, 2 numerics --> konvertiert 1, 3 in characters
x <- c(1, "canada", 3)
x

#The function as.character() turns numbers into characters.
x <- 1:5
y <- as.character(x)
y
#The function as.numeric() turns characters into numbers.
as.numeric(y)

#not available (Warnmeldung): NA
x <- c("1", "b", "3")
as.numeric(x)

#Assessment 2.1 

# You already wrote this code
temp <- c(35, 88, 42, 84, 81, 30)
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro", "San Juan", "Toronto")
# connecting numeric and character vectors
names(temp) <- city
# test, if they are connected
temp["Lagos"]
temp[1:6]
temp[c(1:6)]

# Create a vector x of integers that starts at 12 and ends at 73.
x <- 12:73
# Determine the length of object x.
length(x)

#pos. odd numbers up to 100
seq(1, 100, 2)

#Vektor, der bei 6 startet in 4/7 Schritten voranschreitet und nicht über 55 geht
#Zudem die Länge dieses Vektors
length(seq(6,55,4/7))

#Sequences of certain length
x <- seq(0, 100, length.out = 5)
#find out the class
class(x)

#create an integer by adding the letter L after a whole number
class(3L)





#2.2

#Morde nach Menge sortieren (zeigt aber nicht in der Reihenfolge der Staaten an)
library(dslabs)
data(murders)
sort(murders$total)

x <- c(31, 4, 15, 92, 65)
x
sort(x)    # puts elements in order

index <- order(x)    # returns index that will put x in order
x[index]    # rearranging by this index puts elements in order
order(x)    # order is the index that puts x in order (die Zahlen 1-5 stehen für die Stelle, an der die entsprechende Zahl an der x-Reihenfolge steht)

murders$state[1:10]
murders$abb[1:10]

#order states by murder totals (low to high)
index <- order(murders$total)
murders$abb[index]    # order abbreviations by total murders

#Maximum
max(murders$total)    # highest number of total murders
i_max <- which.max(murders$total)    # index with highest number of murders
i_max
murders$state[i_max]    # state name with highest number of total murders
#Minimum
min(murders$total)
i_min <- which.min(murders$total)
i_min
murders$state[i_min]

#rank (Tabellenartig: das was direkt darunter steht trifft zu, direkt zuordnebar)
x <- c(31,4,15,92,65)
x
rank(x)    # returns ranks (smallest to largest)
#Note that if rank(x) gives you the ranks of x from lowest to highest, rank(-x) gives you the ranks from highest to lowest.
rank(-x)

#Assessment 2.2
# Access population values from the dataset and store it in pop
pop <- murders$population
# Sort the object and save it in the same object 
pop <- sort(pop)
# Report the smallest population size 
pop[1]

# Define the variable i to be the index of the smallest state
i <- which.min(murders$population)
# Define variable states to hold the states
states <- murders$state
# Use the index you just defined to find the state with the smallest population
states[i]

# Store temperatures in an object 
temp <- c(35, 88, 42, 84, 81, 30)
# Store city names in an object 
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro", "San Juan", "Toronto")
# Create data frame with city names and temperature 
city_temps <- data.frame(name = city, temperature = temp)
# Define a variable states to be the state names from the murders data frame
states <- murders$state
# Define a variable ranks to determine the population size ranks 
ranks <- rank(murders$population)
# Create a data frame my_df with the state name and its rank
my_df <- data.frame(states = states, ranks = ranks)


# Define a variable states to be the state names from the murders data frame
states <- murders$state
# Define a variable ranks to determine the population size ranks 
ranks <- rank(murders$population)
# Define a variable ind to store the indexes needed to order the population values
ind <- order(murders$population)
# Create a data frame my_df with the state name and its rank and ordered from least populous to most 
my_df <- data.frame(states = states[ind], ranks = ranks[ind])

# Using new dataset 
library(dslabs)
data(na_example)
# Checking the structure 
str(na_example)
# Find out the mean of the entire dataset 
mean(na_example)
# Use is.na to create a logical index ind that tells which entries are NA
ind <- is.na(na_example)
# Determine how many NA ind has using the sum function
sum(ind)

# Note what we can do with the ! operator
x <- c(1, 2, 3)
ind <- c(FALSE, TRUE, FALSE)
x[!ind]
# Create the ind vector for `na_example`
library(dslabs)
data(na_example)
ind <- is.na(na_example)
# When we try to compute the average, we get the answer NA
mean(na_example)
# Compute the average (the mean) of `na_example` after removing the `NA` entries by using the `!` operator on `ind`
mean(na_example[!ind])



# Which State largest population?
murders$state[which.max(murders$population)]
# how many people live there
max(murders$population)


# hights in inches
heights <- c(22,25,21,20)
# umrechnen in cm (multiplicate with factor 2,54)
heights * 2.54
# Abweichung vom Durchschnitt
heights - 23
#Bsp.:
# Assign city names to `city` 
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro", "San Juan", "Toronto")
# Store temperature values in `temp`
temp <- c(35, 88, 42, 84, 81, 30)
# Convert temperature into Celsius and overwrite the original values of 'temp' with these Celsius values
temp <- 5/9 * (temp-32)
# Create a data frame `city_temps` 
city_temps <- data.frame(name = city, temperature = temp)

# how to obtain the murder rate (man kann Vektoren der gleichen Länge miteinander +,-,*,/ rechnen)
murder_rate <- murders$total / murders$population * 100000
murder_rate
# ordering the states by murder rate, in decreasing order
murders$state[order(murder_rate, decreasing=TRUE)]
# Calculate the average murder rate in the US 
mean(murders$total/murders$population*100000)


### 2 ASSESSMENT

x <- c(2, 43, 27, 96, 18)
min(x)
which.min(x)
max(x)
which.max(x)

sort(x)
order(x)
rank(x)

name <- c("Mandi", "Amy", "Nicole", "Olivia")
distance <- c(0.8, 3.1, 2.8, 4.0)   #in miles
time <- c(10, 30, 40, 50)           #in minutes

#time to hours
time <- time/60
speed <- distance/time




##Section3 

# defining murder rate as before
murder_rate <- murders$total / murders$population * 100000

# creating a logical vector that specifies if the murder rate in that state is less than or equal to 0.71
index <- murder_rate < 0.71     #less
index
index <- murder_rate <= 0.71    #less or equal
index
# determining which states have murder rates less than or equal to 0.71
murders$state[index]
# calculating how many states have a murder rate less than or equal to 0.71 (cases that are TRUE are counted)
sum(index)

#logical operations
TRUE &TRUE
TRUE& FALSE
FALSE&FALSE

# creating the two logical vectors representing our conditions (combining conditions)
west <- murders$region == "West"
safe <- murder_rate <= 1
# defining an index and identifying states with both conditions true
index <- safe & west
murders$state[index]

#"which" gives us the entries of a logical vector that are true.
x <- c(FALSE, TRUE, FALSE, TRUE, TRUE, FALSE)
which(x)    # returns indices that are TRUE

# to determine the murder rate in Massachusetts we may do the following
index <- which(murders$state == "Massachusetts")
index
murder_rate[index]

# "match" looks for entries in a vector and returns the index needed to access them
# to obtain the indices and subsequent murder rates of New York, Florida, Texas, we do:
index <- match(c("New York", "Florida", "Texas"), murders$state)
index
murders$state[index]
murder_rate[index]

# %in% operator
x <- c("a", "b", "c", "d", "e")
y <- c("a", "d", "f")
y %in% x

# to see if Boston, Dakota, and Washington are states
c("Boston", "Dakota", "Washington") %in% murders$state



# Store the murder rate per 100,000 for each state, in murder_rate
murder_rate <- murders$total/murders$population*100000
# Store the murder_rate < 1 in low 
low <- murder_rate < 1
# Names of states with murder rates lower than 1
murders$state[low]
# Create a vector ind for states in the Northeast and with murder rates lower than 1. 
ind <- low & (murders$region == "Northeast")
# Names of states in `ind` 
murders$state[ind]
# Compute the average murder rate using `mean` and store it in object named `avg`
avg <- mean(murder_rate)
# How many states have murder rates below avg ? Check using sum 
sum(murder_rate < avg)
# Store the 3 abbreviations in a vector called `abbs` (remember that they are character vectors and need quotes)
abbs <- c("AK", "MI", "IA")
# Match the abbs to the murders$abb and store in ind
ind <- match(abbs, murders$abb)
# Print state names from ind
murders$state[ind]
# Store the 5 abbreviations in `abbs`. (remember that they are character vectors)
abbs <- c("MA","ME","MI","MO","MU")
# Use the %in% command to check if the entries of abbs are abbreviations in the the murders data frame
abbs %in% murders$abb
# Use the `which` command and `!` operator to find out which index abbreviations are not actually part of the dataset and store in `ind`
ind <- which(!abbs%in%murders$abb)
# Names of abbreviations in `ind`
abbs[ind]


# installing and loading the dplyr package
install.packages("dplyr")
library(dplyr)

# adding a column with mutate, redine the murders table... (if you reload it from the dslabs package,
# you will overwrite what you've just created.)
library(dslabs)
data("murders")
murders <- mutate(murders, rate = total / population * 100000)
murders

# subsetting with filter (data table as first argument, conditional statement as the next)
filter(murders, rate <= 0.71)

# selecting columns (ausgewählte spalten währlen) with select
new_table <- select(murders, state, region, rate)
filter(new_table, rate <= 0.71)

# using the pipe
murders %>% select(state, region, rate) %>% filter(rate <= 0.71)

# creating a data frame with stringAsFactors = FALSE
grades <- data.frame(names = c("John", "Juan", "Jean", "Yao"),
                     exam_1 = c(95, 80, 90, 85), 
                     exam_2 = c(90, 85, 85, 90),
                     stringsAsFactors = FALSE) #stringsAsFactors = FALSE damit characters durch dplyr nicht in factors umgewandelt werden
class(grades$names)

# Defining rate
rate <-  murders$total/ murders$population * 100000
# Redefine murders to include a column named rank
# with the ranks of rate from highest to lowest
murders <- mutate(murders, rank(- rate))
murders
# filter() is for rows; select() is for columns
filter(murders, state == "New York")

# Add the necessary columns
murders <- mutate(murders, rate = total/population * 100000, rank = rank(-rate))
# !!!! Filter to show the top 5 states with the highest murder rates
filter(murders, rank <= 5)

# remove rows with !=
no_florida <- filter(murders, state != "Florida")

# How many states are in this category?
nrow()
nrow(no_florida)

# Create a new data frame called murders_nw with only the states from the northeast and the west
murders_nw <- filter(murders, region %in% c("West", "Northeast"))

# Create a table, call it my_states, that satisfies both the conditions 
murders <- mutate(murders, rate =  total / population * 100000, rank = rank(-rate))
my_states <- filter(murders, rate < 1 & region %in% c("Northeast" , "West"))














library(dplyr)
library(dslabs)
data("murders")

population_in_millions <- murders$population/10^6
total_gun_murders <- murders$total
plot(population_in_millions, total_gun_murders)

# a simple scatterplot of total murders versus population
x <- murders$population /10^6
y <- murders$total
plot(x, y)

# a histogram of murder rates
murders <- mutate(murders, rate = total / population * 100000)
hist(murders$rate) 
#eine sehr Hohe Rate mit mehr als 15 --> welcher Staat?
murders$state[which.max(murders$rate)]

# boxplots of murder rates by region
boxplot(rate~region, data = murders)


#3.4


library(tidyverse)
library(dplyr)
library(dslabs)
data(murders)
murders <- mutate(murders, rate = total / population * 10^5)
# generate new tables
# minimum, median, and maximum murder rate for the states in the West region
s <- murders %>% 
  filter(region == "West") %>%
  summarize(minimum = min(rate), 
            median = median(rate), 
            maximum = max(rate))
s

# accessing the components with the accessor $
s$median
s$maximum

# average rate unadjusted by population size
mean(murders$rate)

# average rate adjusted by population size
us_murder_rate <- murders %>% 
  summarize(rate = sum(total) / sum(population) * 10^5)
us_murder_rate

library(tidyverse)
library(dplyr)
library(dslabs)
data(murders)
murders <- mutate(murders, rate = total / population * 10^5)

quantile(x, c(0, 0.5, 1))
# minimum, median, and maximum murder rate for the states in the West region using quantile
# note that this returns a vector
murders %>% 
  filter(region == "West") %>%
  summarize(range = quantile(rate, c(0, 0.5, 1)))

# returning minimum, median, and maximum as a data frame
my_quantile <- function(x){
  r <-  quantile(x, c(0, 0.5, 1))
  data.frame(minimum = r[1], median = r[2], maximum = r[3]) 
}
murders %>% 
  filter(region == "West") %>%
  summarize(my_quantile(rate))

library(tidyverse)
library(dplyr)
library(dslabs)
data(murders)
murders <- mutate(murders, rate = total / population * 10^5)

# average rate adjusted by population size
us_murder_rate <- murders %>% 
  summarize(rate = sum(total) / sum(population) * 10^5)
us_murder_rate

# us_murder_rate is stored as a data frame
class(us_murder_rate)
# most dplyr-functions return a data frame (problematic, if you want to use the result with functions --> numeric value required)

# the pull function can return it as a numeric(or vector) value
us_murder_rate %>% pull(rate)

# using pull to save the number directly
us_murder_rate <- murders %>% 
  summarize(rate = sum(total) / sum(population) * 10^5) %>%
  pull(rate)
us_murder_rate

# us_murder_rate is now stored as a number (numeric)
class(us_murder_rate)


library(tidyverse)
library(dplyr)
library(dslabs)
data(murders)
murders <- mutate(murders, rate = total / population * 10^5)

# average rate adjusted by population size
us_murder_rate <- murders %>% 
  summarize(rate = sum(total) / sum(population) * 10^5)
us_murder_rate
class(us_murder_rate)

# using the dot to access the rate (dot imitates the pull function)
us_murder_rate <- murders %>% 
  summarize(rate = sum(total) / sum(population) * 10^5) %>%
  .$rate
us_murder_rate
class(us_murder_rate)


library(tidyverse)
library(dplyr)
library(dslabs)
data(murders)
murders <- mutate(murders, rate = total / population * 10^5)

# group by function --> split data first into groups, then compute summaries for each group -->e.g. region
murders %>% group_by(region)   # einziger Unterschied zu vorher: 2.Reihe Groups: region[4]

# # # # summarize after grouping (very very important!!!)
murders %>% 
  group_by(region) %>%
  summarize(median = median(rate))

library(tidyverse)
library(dplyr)
library(dslabs)
data(murders)
murders <- mutate(murders, rate = total / population * 10^5)

# dplyr arrange() function: order the states by population size
murders %>% arrange(population) %>% head()

# order the states by murder rate - the default is ascending order
murders %>% arrange(rate) %>% head()

# dplyr desc() function transforms vector to be in descending order
# --> order the states by murder rate in descending order
murders %>% arrange(desc(rate)) %>% head()

# order the states by region and then within region by murder rate 
murders %>% arrange(region, rate) %>% head()

# top_n() function : choose how many rows you want to see
# --> return the top 10 states by murder rate
murders %>% top_n(10, rate)

# return the top 10 states ranked by murder rate, sorted by murder rate
murders %>% arrange(desc(rate)) %>% top_n(10)


# 3.5

# install the data.table package before you use it!
install.packages("data.table")

# load data.table package
library(data.table)

# load other packages and datasets
library(tidyverse)
library(dplyr)
library(dslabs)
data(murders)

# convert the data frame into a data.table object
murders <- setDT(murders)   #or
murders <- setDT  

# selecting in dplyr
select(murders, state, region)

# selecting in data.table - 2 methods
murders[, c("state", "region")] |> head()
murders[, .(state, region)] |> head()

# adding or changing a column in dplyr
murders <- mutate(murders, rate = total / population * 10^5)

# data.table colon equal function: adding or changing a column in data.table
murders[, rate := total / population * 100000]  #as in dplyr we use total, population without quotes
head(murders)
# defining multiple new columns --> := function with multiple arguments seperated by ,
murders[, ":="(rate = total / population * 100000, rank = rank(population))]

# y is referring to x and := changes by reference (y ist kein neues Objekt; nur anderer Name für x)
x <- data.table(a = 1)
y <- x
# when x is changed, y changes too
x[,a := 2]
y
# when you change y, x changes also !!! 
y[,a := 1]
x
#---> to avoid this, use copy()
# use copy to make an actual copy of the data set
x <- data.table(a = 1)
y <- copy(x)
x[,a := 2]
y  # y bleibt so, wie es vor nachträglicher Änderung von x definiert wurde


library(tidyverse)
library(dplyr)
library(dslabs)
data(murders)
library(data.table)
murders <- setDT(murders)  #wichtig
murders <- mutate(murders, rate = total / population * 10^5)
murders[, rate := total / population * 100000]

# subsetting in dplyr (filter rows)
filter(murders, rate <= 0.7)

# subsetting in data.table
murders[rate <= 0.7]

# combining filter and select in data.table
murders[rate <= 0.7, .(state, rate)]

# combining filter and select in dplyr
murders %>% filter(rate <= 0.7) %>% select(state, rate)


# load packages and prepare the data - heights dataset
library(tidyverse)
library(dplyr)
library(dslabs)
data(heights)
heights <- setDT(heights)

# summarizing in dplyr
s <- heights %>% 
  summarize(average = mean(height), standard_deviation = sd(height))

# summarizing in data.table
s <- heights[, .(average = mean(height), standard_deviation = sd(height))]

# subsetting and then summarizing in dplyr
s <- heights %>% 
  filter(sex == "Female") %>%
  summarize(average = mean(height), standard_deviation = sd(height))

# subsetting and then summarizing in data.table
s <- heights[sex == "Female", .(average = mean(height), standard_deviation = sd(height))]

# previously defined function
median_min_max <- function(x){
  qs <- quantile(x, c(0.5, 0, 1))
  data.frame(median = qs[1], minimum = qs[2], maximum = qs[3])
}

# multiple summaries in data.table
heights[, .(median_min_max(height))]

# grouping then summarizing in data.table
heights[, .(average = mean(height), standard_deviation = sd(height)), by = sex]


library(tidyverse)
library(dplyr)
library(data.table)
library(dslabs)
data(murders)
murders <- setDT(murders)
murders[, rate := total / population * 100000]

# data.table easier to order rows based on the values of a column
# order by population
murders[order(population)] |> head()

# order by population in descending order
murders[order(population, decreasing = TRUE)] |> head()

# order by region and then within region by murder rate
murders[order(region, rate)]
murders[order(region, rate)] |> head()

# digits
options(digits = 3)    # report 3 significant digits for all answers



## 4

# an example showing the general structure of an if-else statement
a <- 0
a <- 2
if(a!=0){
  print(1/a)
} else{
  print("No reciprocal for 0.")
}

# general if else form
if(boolean condition){
  expressions
} else{
  alternative expressions
}

# an example that tells us which states, if any, have a murder rate less than 0.5
library(dslabs)
data(murders)
murder_rate <- murders$total / murders$population*100000
ind <- which.min(murder_rate)

if(murder_rate[ind] < 0.5){
  print(murders$state[ind]) 
} else{
  print("No state has murder rate that low")
}

# changing the condition to < 0.25 changes the result
if(murder_rate[ind] < 0.25){
  print(murders$state[ind]) 
} else{
  print("No state has a murder rate that low.")
}

# the ifelse() function works similarly to an if-else conditional (logical and two possible answers)
a <- 0
ifelse(a > 0, 1/a, NA)
      #^if   #say^#else say NA

# the ifelse() function is particularly useful on vectors
a <- c(0,1,2,-4,5)
result <- ifelse(a > 0, 1/a, NA)
result

# the ifelse() function is also helpful for replacing missing values
data(na_example)
no_nas <- ifelse(is.na(na_example), 0, na_example) 
sum(is.na(no_nas))

# the any() and all() functions evaluate logical vectors
# any returns a TRUE if any of the entries is true
# all returns a TRUE if all of the entries are TRUE, if not, it returns a FALSE
z <- c(TRUE, TRUE, FALSE)
any(z)
all(z)
z <- c(FALSE, FALSE, FALSE)
any(z)



#funktions

# example of defining a function to compute the average of a vector x --< sum(x)/length(x)
avg <- function(x){
  s <- sum(x)
  n <- length(x)
  s/n  # this is what is return
}

# --> mean function
# check if it does the same:
identical(mean(x), avg(x))

#values inside the function are only defined inside, they are not in rhe workspace
# we see that the above function and the pre-built R mean() function are identical
x <- 1:100
identical(mean(x), avg(x))

# variables inside a function are not defined in the workspace
s <- 3
avg(1:10)
s

# the general form of a function
my_function <- function(VARIABLE_NAME x (or x,y,z)){
  operations that operate on x(or x,y,z) which is defined
  by user of function value
  final line is returned
}

# functions can have multiple arguments as well as default values
avg <- function(x, arithmetic = TRUE){
  n <- length(x)
  ifelse(arithmetic, sum(x)/n, prod(x)^(1/n))
}


# creating a function that computes the sum of integers 1 through n
compute_s_n <- function(n){
  x <- 1:n
  sum(x)
}
compute_s_n(5) #example
compute_s_n(100) #example

# for-loop general form
for (i in range of values) {
  operations that use i,
  which is changing across
  the range of values
}

# a very simple for-loop  # ist just a variable, when i type just i, I'll get 5
for(i in 1:5){
  print(i)
}
i

# a for-loop for our summation
m <- 25
s_n <- vector(length = m) # create an empty vector
for(n in 1:m){
  s_n[n] <- compute_s_n(n)
}

# creating a plot for our summation function
n <- 1:m
plot(n, s_n)

# a table of values comparing our function to the summation formula
head(data.frame(s_n = s_n, formula = n*(n+1)/2))

# overlaying our function with the summation formula
plot(n, s_n)
lines(n, n*(n+1)/2)

# wichtige weitere Funktionen: apply(), sapply(), tapply() --> apply-family

#Other functions that are widely used are split, cut, quantile, reduce, identical, unique, 
